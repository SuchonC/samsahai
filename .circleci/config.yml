commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.12

    working_directory: /go/src/github.com/agoda-com/samsahai
    steps:
#      - checkout
#      - restore_cache:
#          keys:
#            - project-{{ checksum "go.sum" }}
#            - project-

      - checkout
      - setup_remote_docker

      - run:
          name: Prepared Env vars.
          command: |
            echo 'export docker_user="$QUAY_DOCKER_USER"' >> $BASH_ENV
            echo 'export docker_registry="$QUAY_DOCKER_REGISTRY"' >> $BASH_ENV
            echo 'export docker_image_repo="phantomnat/samsahai"' >> $BASH_ENV
            # echo 'export docker_image_tag="latest"' >> $BASH_ENV

      - run:
          name: "get required projects"
          command: |
            go get golang.org/x/tools/cmd/goimports
            go get github.com/ahmetb/govvv
            go get github.com/jpoles1/gopherbadger
            echo 'export GO111MODULE="on"' >> $BASH_ENV

      - run:
          name: "install dependencies"
          command: |
            go mod tidy

      - run:
          name: "run test"
          command: |
            echo GO111MODULE=${GO111MODULE}
            make coverage

      - run:
          name: "build docker"
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              DOCKER_IMAGE_TAG=$(cat ./VERSION)

              docker_image_exists() {
                local image_full_name="$1"; shift
                local wait_time="${1:-5}"
                local search_term='Pulling|is up to date|not found'
                local result="$((timeout --preserve-status "$wait_time" docker 2>&1 pull "$image_full_name" &) | grep -v 'Pulling repository' | egrep -o "$search_term")"
                test "$result" || { echo "Timed out too soon. Try using a wait_time greater than $wait_time..."; return 1 ;}
                echo $result | grep -vq 'not found'
              }

              if docker_image_exists "$docker_registry/$docker_image_repo:$DOCKER_IMAGE_TAG"; then
                echo "error: docker image version $DOCKER_IMAGE_TAG already exists!"
                exit 1
              fi
            else
              DOCKER_IMAGE_TAG=$(echo "${CIRCLE_PULL_REQUEST}" |awk -F/ '{print $ (NF-1)"-"$NF}')
            fi
            echo tag: $DOCKER_IMAGE_TAG
            echo "export docker_image_tag=\"$DOCKER_IMAGE_TAG\"" >> $BASH_ENV
            make build-docker docker_image_tag=$DOCKER_IMAGE_TAG

      - run:
          name: docker login
          command: |
            make docker-login docker_password="$QUAY_DOCKER_TOKEN"

      - run:
          name: docker push
          command: |
            make docker-push

            if [ "$CIRCLE_BRANCH" = "master" ]; then
              make docker-tag-n-push-latest
            fi

#      - save_cache:
#          key: project-{{ checksum "project.clj" }}
#          paths:
#            - /go

#  publish-docker:
#    docker:
#      - image: circleci/golang:1.12
#    working_directory: /go/src/github.com/agoda-com/samsahai
#      steps:
#        - early_return_for_forked_pull_requests
#        - checkout
#        - run:
#            name: Prepared Env vars.
#            command: |
#              echo 'export docker_user="$QUAY_DOCKER_USER"' >> $BASH_ENV
#              echo 'export docker_registry="$QUAY_DOCKER_REGISTRY"' >> $BASH_ENV
#              echo 'export docker_registry="$QUAY_DOCKER_REGISTRY"' >> $BASH_ENV
#        attach_workspace:
#          at: /go
#
#        - run:
#            name: Docker login
#            command: |
#              make docker-login docker_password="$QUAY_DOCKER_TOKEN"
#        - run:
#            name: Docker push
#            command: |
#              make docker-push

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
#      - publish-docker:
#          requires:
#            - build
#          filters:
#            branches:
#              only: master
